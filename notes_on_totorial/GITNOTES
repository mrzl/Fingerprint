in order to skip the staging area and commit every file that has been changed since the last commit use the command:
commit -a (-m "message")

if you want to remove a file from the directory and remove it from being tracked by git use the command
git rm filename

if you want to just remove it from being tracked, but still present on the harddrive use
git rm --cached filename

this displays a pretty log of the commits
git log --pretty=shirt --graph

mit dem folgenden programm hat man eine noch bessere grafische darstellung der commit historie
gitk

um ein neues remote repository für ein lokales repository hinzuzufügen benutzt man:
git remote add ob git://github.com/paulboone/ticgit.git

und dann per folgendem commando alle changes herunterladen:
git fetch pb

um von einem remote repository alle änderungen zu laden und in den aktuellen branch einzugliedern(merge) wird das folgende kommando benutzt:
git pull

hiermit kann ein neuer tag hinzugefügt werden:
git tag -a 2.6 -m 'tag note'

um informationen zu einem tag anzusehen benutze:
git show v2.6

um tags zu signed muss irgendetwas mit gpg unter windows verändert werden. Vermutlich werde ich das auch einfach nie brauchen, deswegen lasse ich das hier weg.

Die Autoverfollständigung in der mSysGit shell verfollständigt sogar Optionen eines Kommandos, wie:
git log --s<tab>
schlägt alle Optionen vor, die mit s beginnen.

Die folgenden Aliases wurden global hinzugefügt:
git config --global alias.lo 'git log --pretty=oneline'
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.last 'log -1 HEAD'
git config --global alias.br 'branch -v'

Um einen neuen Branch anzulegen benutze:
git branch branchname

Um von einem Branch zum anderen zu wechseln benutze:
git checkout branchname

Wenn man auf einem branch ist und etwas commitet, dann ist es nur in dem branch commited. Wenn man dann wieder zu einem anderen Branch wechselt sind bestehen nur alle commits, die auf diesem Branch gemacht wurden.

Um einen neuen Branch anzulegen und gleichzeitig auf ihn zu wechseln benutzte folgendes Kommando:
git checkout -b branchname

Um einen veränderten Branch mit dem master branch zu vereinigen (mergen) benutze folgendes Kommando:
git checkout master
git merge branchtomerge

Um einen branch, der gemerged wurde wieder zu löschen, da master und der branch an die selbe Stelle zeigt benutzte folgendes Kommando:
git branch -d branchname

Um alle Branches anzuzeigen benutze:
git branch oder git branch -v (zeigt die letzte commit-Nachricht)
-> Ich habe ein neues Alias hinzugefügt, um per git br alle branchcommits anzeigen zu lassen.